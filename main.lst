                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.7 #12016 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mgbz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _jump
                                     13 	.globl _wouldhitsurface
                                     14 	.globl _performatdelay
                                     15 	.globl _set_sprite_data
                                     16 	.globl _wait_vbl_done
                                     17 	.globl _joypad
                                     18 	.globl _floorYPosition
                                     19 	.globl _currentspeedY
                                     20 	.globl _gravity
                                     21 	.globl _jumping
                                     22 	.globl _playerlocation
                                     23 	.globl _bloke
                                     24 ;--------------------------------------------------------
                                     25 ; special function registers
                                     26 ;--------------------------------------------------------
                                     27 ;--------------------------------------------------------
                                     28 ; ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area _DATA
                           000000    31 G$bloke$0_0$0==.
      000000                         32 _bloke::
      000000                         33 	.ds 128
                           000080    34 G$playerlocation$0_0$0==.
      000080                         35 _playerlocation::
      000080                         36 	.ds 2
                           000082    37 G$jumping$0_0$0==.
      000082                         38 _jumping::
      000082                         39 	.ds 1
                           000083    40 G$gravity$0_0$0==.
      000083                         41 _gravity::
      000083                         42 	.ds 1
                           000084    43 G$currentspeedY$0_0$0==.
      000084                         44 _currentspeedY::
      000084                         45 	.ds 1
                           000085    46 G$floorYPosition$0_0$0==.
      000085                         47 _floorYPosition::
      000085                         48 	.ds 1
                                     49 ;--------------------------------------------------------
                                     50 ; absolute external ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area _DABS (ABS)
                                     53 ;--------------------------------------------------------
                                     54 ; global & static initialisations
                                     55 ;--------------------------------------------------------
                                     56 	.area _HOME
                                     57 	.area _GSINIT
                                     58 	.area _GSFINAL
                                     59 	.area _GSINIT
                           000000    60 	C$main.c$4$1_0$107	= .
                                     61 	.globl	C$main.c$4$1_0$107
                                     62 ;main.c:4: unsigned char bloke[] =
      000000 21r00r00                63 	ld	hl, #_bloke
      000003 36 00                   64 	ld	(hl), #0x00
      000005 21r01r00                65 	ld	hl, #(_bloke + 0x0001)
      000008 36 00                   66 	ld	(hl), #0x00
      00000A 21r02r00                67 	ld	hl, #(_bloke + 0x0002)
      00000D 36 38                   68 	ld	(hl), #0x38
      00000F 21r03r00                69 	ld	hl, #(_bloke + 0x0003)
      000012 36 38                   70 	ld	(hl), #0x38
      000014 21r04r00                71 	ld	hl, #(_bloke + 0x0004)
      000017 36 7C                   72 	ld	(hl), #0x7c
      000019 21r05r00                73 	ld	hl, #(_bloke + 0x0005)
      00001C 36 44                   74 	ld	(hl), #0x44
      00001E 21r06r00                75 	ld	hl, #(_bloke + 0x0006)
      000021 36 7F                   76 	ld	(hl), #0x7f
      000023 21r07r00                77 	ld	hl, #(_bloke + 0x0007)
      000026 36 7F                   78 	ld	(hl), #0x7f
      000028 21r08r00                79 	ld	hl, #(_bloke + 0x0008)
      00002B 36 44                   80 	ld	(hl), #0x44
      00002D 21r09r00                81 	ld	hl, #(_bloke + 0x0009)
      000030 36 74                   82 	ld	(hl), #0x74
      000032 21r0Ar00                83 	ld	hl, #(_bloke + 0x000a)
      000035 36 46                   84 	ld	(hl), #0x46
      000037 21r0Br00                85 	ld	hl, #(_bloke + 0x000b)
      00003A 36 7C                   86 	ld	(hl), #0x7c
      00003C 21r0Cr00                87 	ld	hl, #(_bloke + 0x000c)
      00003F 36 40                   88 	ld	(hl), #0x40
      000041 21r0Dr00                89 	ld	hl, #(_bloke + 0x000d)
      000044 36 78                   90 	ld	(hl), #0x78
      000046 21r0Er00                91 	ld	hl, #(_bloke + 0x000e)
      000049 36 24                   92 	ld	(hl), #0x24
      00004B 21r0Fr00                93 	ld	hl, #(_bloke + 0x000f)
      00004E 36 3C                   94 	ld	(hl), #0x3c
      000050 21r10r00                95 	ld	hl, #(_bloke + 0x0010)
      000053 36 18                   96 	ld	(hl), #0x18
      000055 21r11r00                97 	ld	hl, #(_bloke + 0x0011)
      000058 36 3C                   98 	ld	(hl), #0x3c
      00005A 21r12r00                99 	ld	hl, #(_bloke + 0x0012)
      00005D 36 00                  100 	ld	(hl), #0x00
      00005F 21r13r00               101 	ld	hl, #(_bloke + 0x0013)
      000062 36 24                  102 	ld	(hl), #0x24
      000064 21r14r00               103 	ld	hl, #(_bloke + 0x0014)
      000067 36 00                  104 	ld	(hl), #0x00
      000069 21r15r00               105 	ld	hl, #(_bloke + 0x0015)
      00006C 36 24                  106 	ld	(hl), #0x24
      00006E 21r16r00               107 	ld	hl, #(_bloke + 0x0016)
      000071 36 00                  108 	ld	(hl), #0x00
      000073 21r17r00               109 	ld	hl, #(_bloke + 0x0017)
      000076 36 24                  110 	ld	(hl), #0x24
      000078 21r18r00               111 	ld	hl, #(_bloke + 0x0018)
      00007B 36 00                  112 	ld	(hl), #0x00
      00007D 21r19r00               113 	ld	hl, #(_bloke + 0x0019)
      000080 36 24                  114 	ld	(hl), #0x24
      000082 21r1Ar00               115 	ld	hl, #(_bloke + 0x001a)
      000085 36 00                  116 	ld	(hl), #0x00
      000087 21r1Br00               117 	ld	hl, #(_bloke + 0x001b)
      00008A 36 36                  118 	ld	(hl), #0x36
      00008C 21r1Cr00               119 	ld	hl, #(_bloke + 0x001c)
      00008F 36 00                  120 	ld	(hl), #0x00
      000091 21r1Dr00               121 	ld	hl, #(_bloke + 0x001d)
      000094 36 00                  122 	ld	(hl), #0x00
      000096 21r1Er00               123 	ld	hl, #(_bloke + 0x001e)
      000099 36 00                  124 	ld	(hl), #0x00
      00009B 21r1Fr00               125 	ld	hl, #(_bloke + 0x001f)
      00009E 36 00                  126 	ld	(hl), #0x00
      0000A0 21r20r00               127 	ld	hl, #(_bloke + 0x0020)
      0000A3 36 00                  128 	ld	(hl), #0x00
      0000A5 21r21r00               129 	ld	hl, #(_bloke + 0x0021)
      0000A8 36 00                  130 	ld	(hl), #0x00
      0000AA 21r22r00               131 	ld	hl, #(_bloke + 0x0022)
      0000AD 36 38                  132 	ld	(hl), #0x38
      0000AF 21r23r00               133 	ld	hl, #(_bloke + 0x0023)
      0000B2 36 38                  134 	ld	(hl), #0x38
      0000B4 21r24r00               135 	ld	hl, #(_bloke + 0x0024)
      0000B7 36 7C                  136 	ld	(hl), #0x7c
      0000B9 21r25r00               137 	ld	hl, #(_bloke + 0x0025)
      0000BC 36 44                  138 	ld	(hl), #0x44
      0000BE 21r26r00               139 	ld	hl, #(_bloke + 0x0026)
      0000C1 36 7F                  140 	ld	(hl), #0x7f
      0000C3 21r27r00               141 	ld	hl, #(_bloke + 0x0027)
      0000C6 36 7F                  142 	ld	(hl), #0x7f
      0000C8 21r28r00               143 	ld	hl, #(_bloke + 0x0028)
      0000CB 36 44                  144 	ld	(hl), #0x44
      0000CD 21r29r00               145 	ld	hl, #(_bloke + 0x0029)
      0000D0 36 74                  146 	ld	(hl), #0x74
      0000D2 21r2Ar00               147 	ld	hl, #(_bloke + 0x002a)
      0000D5 36 46                  148 	ld	(hl), #0x46
      0000D7 21r2Br00               149 	ld	hl, #(_bloke + 0x002b)
      0000DA 36 7C                  150 	ld	(hl), #0x7c
      0000DC 21r2Cr00               151 	ld	hl, #(_bloke + 0x002c)
      0000DF 36 40                  152 	ld	(hl), #0x40
      0000E1 21r2Dr00               153 	ld	hl, #(_bloke + 0x002d)
      0000E4 36 78                  154 	ld	(hl), #0x78
      0000E6 21r2Er00               155 	ld	hl, #(_bloke + 0x002e)
      0000E9 36 24                  156 	ld	(hl), #0x24
      0000EB 21r2Fr00               157 	ld	hl, #(_bloke + 0x002f)
      0000EE 36 3C                  158 	ld	(hl), #0x3c
      0000F0 21r30r00               159 	ld	hl, #(_bloke + 0x0030)
      0000F3 36 18                  160 	ld	(hl), #0x18
      0000F5 21r31r00               161 	ld	hl, #(_bloke + 0x0031)
      0000F8 36 3C                  162 	ld	(hl), #0x3c
      0000FA 21r32r00               163 	ld	hl, #(_bloke + 0x0032)
      0000FD 36 00                  164 	ld	(hl), #0x00
      0000FF 21r33r00               165 	ld	hl, #(_bloke + 0x0033)
      000102 36 22                  166 	ld	(hl), #0x22
      000104 21r34r00               167 	ld	hl, #(_bloke + 0x0034)
      000107 36 00                  168 	ld	(hl), #0x00
      000109 21r35r00               169 	ld	hl, #(_bloke + 0x0035)
      00010C 36 22                  170 	ld	(hl), #0x22
      00010E 21r36r00               171 	ld	hl, #(_bloke + 0x0036)
      000111 36 00                  172 	ld	(hl), #0x00
      000113 21r37r00               173 	ld	hl, #(_bloke + 0x0037)
      000116 36 22                  174 	ld	(hl), #0x22
      000118 21r38r00               175 	ld	hl, #(_bloke + 0x0038)
      00011B 36 00                  176 	ld	(hl), #0x00
      00011D 21r39r00               177 	ld	hl, #(_bloke + 0x0039)
      000120 36 23                  178 	ld	(hl), #0x23
      000122 21r3Ar00               179 	ld	hl, #(_bloke + 0x003a)
      000125 36 00                  180 	ld	(hl), #0x00
      000127 21r3Br00               181 	ld	hl, #(_bloke + 0x003b)
      00012A 36 30                  182 	ld	(hl), #0x30
      00012C 21r3Cr00               183 	ld	hl, #(_bloke + 0x003c)
      00012F 36 00                  184 	ld	(hl), #0x00
      000131 21r3Dr00               185 	ld	hl, #(_bloke + 0x003d)
      000134 36 00                  186 	ld	(hl), #0x00
      000136 21r3Er00               187 	ld	hl, #(_bloke + 0x003e)
      000139 36 00                  188 	ld	(hl), #0x00
      00013B 21r3Fr00               189 	ld	hl, #(_bloke + 0x003f)
      00013E 36 00                  190 	ld	(hl), #0x00
      000140 21r40r00               191 	ld	hl, #(_bloke + 0x0040)
      000143 36 00                  192 	ld	(hl), #0x00
      000145 21r41r00               193 	ld	hl, #(_bloke + 0x0041)
      000148 36 00                  194 	ld	(hl), #0x00
      00014A 21r42r00               195 	ld	hl, #(_bloke + 0x0042)
      00014D 36 38                  196 	ld	(hl), #0x38
      00014F 21r43r00               197 	ld	hl, #(_bloke + 0x0043)
      000152 36 38                  198 	ld	(hl), #0x38
      000154 21r44r00               199 	ld	hl, #(_bloke + 0x0044)
      000157 36 7C                  200 	ld	(hl), #0x7c
      000159 21r45r00               201 	ld	hl, #(_bloke + 0x0045)
      00015C 36 44                  202 	ld	(hl), #0x44
      00015E 21r46r00               203 	ld	hl, #(_bloke + 0x0046)
      000161 36 7F                  204 	ld	(hl), #0x7f
      000163 21r47r00               205 	ld	hl, #(_bloke + 0x0047)
      000166 36 7F                  206 	ld	(hl), #0x7f
      000168 21r48r00               207 	ld	hl, #(_bloke + 0x0048)
      00016B 36 44                  208 	ld	(hl), #0x44
      00016D 21r49r00               209 	ld	hl, #(_bloke + 0x0049)
      000170 36 74                  210 	ld	(hl), #0x74
      000172 21r4Ar00               211 	ld	hl, #(_bloke + 0x004a)
      000175 36 46                  212 	ld	(hl), #0x46
      000177 21r4Br00               213 	ld	hl, #(_bloke + 0x004b)
      00017A 36 7C                  214 	ld	(hl), #0x7c
      00017C 21r4Cr00               215 	ld	hl, #(_bloke + 0x004c)
      00017F 36 40                  216 	ld	(hl), #0x40
      000181 21r4Dr00               217 	ld	hl, #(_bloke + 0x004d)
      000184 36 78                  218 	ld	(hl), #0x78
      000186 21r4Er00               219 	ld	hl, #(_bloke + 0x004e)
      000189 36 24                  220 	ld	(hl), #0x24
      00018B 21r4Fr00               221 	ld	hl, #(_bloke + 0x004f)
      00018E 36 3C                  222 	ld	(hl), #0x3c
      000190 21r50r00               223 	ld	hl, #(_bloke + 0x0050)
      000193 36 18                  224 	ld	(hl), #0x18
      000195 21r51r00               225 	ld	hl, #(_bloke + 0x0051)
      000198 36 3C                  226 	ld	(hl), #0x3c
      00019A 21r52r00               227 	ld	hl, #(_bloke + 0x0052)
      00019D 36 00                  228 	ld	(hl), #0x00
      00019F 21r53r00               229 	ld	hl, #(_bloke + 0x0053)
      0001A2 36 42                  230 	ld	(hl), #0x42
      0001A4 21r54r00               231 	ld	hl, #(_bloke + 0x0054)
      0001A7 36 00                  232 	ld	(hl), #0x00
      0001A9 21r55r00               233 	ld	hl, #(_bloke + 0x0055)
      0001AC 36 42                  234 	ld	(hl), #0x42
      0001AE 21r56r00               235 	ld	hl, #(_bloke + 0x0056)
      0001B1 36 00                  236 	ld	(hl), #0x00
      0001B3 21r57r00               237 	ld	hl, #(_bloke + 0x0057)
      0001B6 36 42                  238 	ld	(hl), #0x42
      0001B8 21r58r00               239 	ld	hl, #(_bloke + 0x0058)
      0001BB 36 00                  240 	ld	(hl), #0x00
      0001BD 21r59r00               241 	ld	hl, #(_bloke + 0x0059)
      0001C0 36 42                  242 	ld	(hl), #0x42
      0001C2 21r5Ar00               243 	ld	hl, #(_bloke + 0x005a)
      0001C5 36 00                  244 	ld	(hl), #0x00
      0001C7 21r5Br00               245 	ld	hl, #(_bloke + 0x005b)
      0001CA 36 63                  246 	ld	(hl), #0x63
      0001CC 21r5Cr00               247 	ld	hl, #(_bloke + 0x005c)
      0001CF 36 00                  248 	ld	(hl), #0x00
      0001D1 21r5Dr00               249 	ld	hl, #(_bloke + 0x005d)
      0001D4 36 00                  250 	ld	(hl), #0x00
      0001D6 21r5Er00               251 	ld	hl, #(_bloke + 0x005e)
      0001D9 36 00                  252 	ld	(hl), #0x00
      0001DB 21r5Fr00               253 	ld	hl, #(_bloke + 0x005f)
      0001DE 36 00                  254 	ld	(hl), #0x00
      0001E0 21r60r00               255 	ld	hl, #(_bloke + 0x0060)
      0001E3 36 00                  256 	ld	(hl), #0x00
      0001E5 21r61r00               257 	ld	hl, #(_bloke + 0x0061)
      0001E8 36 00                  258 	ld	(hl), #0x00
      0001EA 21r62r00               259 	ld	hl, #(_bloke + 0x0062)
      0001ED 36 38                  260 	ld	(hl), #0x38
      0001EF 21r63r00               261 	ld	hl, #(_bloke + 0x0063)
      0001F2 36 38                  262 	ld	(hl), #0x38
      0001F4 21r64r00               263 	ld	hl, #(_bloke + 0x0064)
      0001F7 36 7C                  264 	ld	(hl), #0x7c
      0001F9 21r65r00               265 	ld	hl, #(_bloke + 0x0065)
      0001FC 36 44                  266 	ld	(hl), #0x44
      0001FE 21r66r00               267 	ld	hl, #(_bloke + 0x0066)
      000201 36 7F                  268 	ld	(hl), #0x7f
      000203 21r67r00               269 	ld	hl, #(_bloke + 0x0067)
      000206 36 7F                  270 	ld	(hl), #0x7f
      000208 21r68r00               271 	ld	hl, #(_bloke + 0x0068)
      00020B 36 44                  272 	ld	(hl), #0x44
      00020D 21r69r00               273 	ld	hl, #(_bloke + 0x0069)
      000210 36 74                  274 	ld	(hl), #0x74
      000212 21r6Ar00               275 	ld	hl, #(_bloke + 0x006a)
      000215 36 46                  276 	ld	(hl), #0x46
      000217 21r6Br00               277 	ld	hl, #(_bloke + 0x006b)
      00021A 36 7C                  278 	ld	(hl), #0x7c
      00021C 21r6Cr00               279 	ld	hl, #(_bloke + 0x006c)
      00021F 36 40                  280 	ld	(hl), #0x40
      000221 21r6Dr00               281 	ld	hl, #(_bloke + 0x006d)
      000224 36 78                  282 	ld	(hl), #0x78
      000226 21r6Er00               283 	ld	hl, #(_bloke + 0x006e)
      000229 36 24                  284 	ld	(hl), #0x24
      00022B 21r6Fr00               285 	ld	hl, #(_bloke + 0x006f)
      00022E 36 3C                  286 	ld	(hl), #0x3c
      000230 21r70r00               287 	ld	hl, #(_bloke + 0x0070)
      000233 36 18                  288 	ld	(hl), #0x18
      000235 21r71r00               289 	ld	hl, #(_bloke + 0x0071)
      000238 36 3C                  290 	ld	(hl), #0x3c
      00023A 21r72r00               291 	ld	hl, #(_bloke + 0x0072)
      00023D 36 00                  292 	ld	(hl), #0x00
      00023F 21r73r00               293 	ld	hl, #(_bloke + 0x0073)
      000242 36 44                  294 	ld	(hl), #0x44
      000244 21r74r00               295 	ld	hl, #(_bloke + 0x0074)
      000247 36 00                  296 	ld	(hl), #0x00
      000249 21r75r00               297 	ld	hl, #(_bloke + 0x0075)
      00024C 36 44                  298 	ld	(hl), #0x44
      00024E 21r76r00               299 	ld	hl, #(_bloke + 0x0076)
      000251 36 00                  300 	ld	(hl), #0x00
      000253 21r77r00               301 	ld	hl, #(_bloke + 0x0077)
      000256 36 44                  302 	ld	(hl), #0x44
      000258 21r78r00               303 	ld	hl, #(_bloke + 0x0078)
      00025B 36 00                  304 	ld	(hl), #0x00
      00025D 21r79r00               305 	ld	hl, #(_bloke + 0x0079)
      000260 36 64                  306 	ld	(hl), #0x64
      000262 21r7Ar00               307 	ld	hl, #(_bloke + 0x007a)
      000265 36 00                  308 	ld	(hl), #0x00
      000267 21r7Br00               309 	ld	hl, #(_bloke + 0x007b)
      00026A 36 06                  310 	ld	(hl), #0x06
      00026C 21r7Cr00               311 	ld	hl, #(_bloke + 0x007c)
      00026F 36 00                  312 	ld	(hl), #0x00
      000271 21r7Dr00               313 	ld	hl, #(_bloke + 0x007d)
      000274 36 00                  314 	ld	(hl), #0x00
      000276 21r7Er00               315 	ld	hl, #(_bloke + 0x007e)
      000279 36 00                  316 	ld	(hl), #0x00
      00027B 21r7Fr00               317 	ld	hl, #(_bloke + 0x007f)
      00027E 36 00                  318 	ld	(hl), #0x00
                           000280   319 	C$main.c$26$1_0$107	= .
                                    320 	.globl	C$main.c$26$1_0$107
                                    321 ;main.c:26: INT8 gravity = -2;
      000280 21r83r00               322 	ld	hl, #_gravity
      000283 36 FE                  323 	ld	(hl), #0xfe
                           000285   324 	C$main.c$28$1_0$107	= .
                                    325 	.globl	C$main.c$28$1_0$107
                                    326 ;main.c:28: UINT8 floorYPosition = 100;
      000285 21r85r00               327 	ld	hl, #_floorYPosition
      000288 36 64                  328 	ld	(hl), #0x64
                                    329 ;--------------------------------------------------------
                                    330 ; Home
                                    331 ;--------------------------------------------------------
                                    332 	.area _HOME
                                    333 	.area _HOME
                                    334 ;--------------------------------------------------------
                                    335 ; code
                                    336 ;--------------------------------------------------------
                                    337 	.area _CODE
                           000000   338 	G$performatdelay$0$0	= .
                                    339 	.globl	G$performatdelay$0$0
                           000000   340 	C$main.c$30$0_0$91	= .
                                    341 	.globl	C$main.c$30$0_0$91
                                    342 ;main.c:30: void performatdelay(UINT8 numloops)
                                    343 ;	---------------------------------
                                    344 ; Function performatdelay
                                    345 ; ---------------------------------
      000000                        346 _performatdelay::
                           000000   347 	C$main.c$34$2_0$91	= .
                                    348 	.globl	C$main.c$34$2_0$91
                                    349 ;main.c:34: for (i = 0; i < numloops; i++)
      000000 0E 00                  350 	ld	c, #0x00
      000002                        351 00103$:
      000002 79                     352 	ld	a, c
      000003 F8 02                  353 	ldhl	sp,	#2
      000005 96                     354 	sub	a, (hl)
      000006 D0                     355 	ret	NC
                           000007   356 	C$main.c$36$3_0$92	= .
                                    357 	.globl	C$main.c$36$3_0$92
                                    358 ;main.c:36: wait_vbl_done();
      000007 CDr00r00               359 	call	_wait_vbl_done
                           00000A   360 	C$main.c$34$2_0$91	= .
                                    361 	.globl	C$main.c$34$2_0$91
                                    362 ;main.c:34: for (i = 0; i < numloops; i++)
      00000A 0C                     363 	inc	c
                           00000B   364 	C$main.c$38$2_0$91	= .
                                    365 	.globl	C$main.c$38$2_0$91
                                    366 ;main.c:38: }
                           00000B   367 	C$main.c$38$2_0$91	= .
                                    368 	.globl	C$main.c$38$2_0$91
                           00000B   369 	XG$performatdelay$0$0	= .
                                    370 	.globl	XG$performatdelay$0$0
      00000B 18 F5                  371 	jr	00103$
                           00000D   372 	G$wouldhitsurface$0$0	= .
                                    373 	.globl	G$wouldhitsurface$0$0
                           00000D   374 	C$main.c$40$2_0$94	= .
                                    375 	.globl	C$main.c$40$2_0$94
                                    376 ;main.c:40: INT8 wouldhitsurface(UINT8 projectedYPosition)
                                    377 ;	---------------------------------
                                    378 ; Function wouldhitsurface
                                    379 ; ---------------------------------
      00000D                        380 _wouldhitsurface::
                           00000D   381 	C$main.c$42$1_0$94	= .
                                    382 	.globl	C$main.c$42$1_0$94
                                    383 ;main.c:42: if (projectedYPosition >= floorYPosition) {
      00000D F8 02                  384 	ldhl	sp,	#2
      00000F 7E                     385 	ld	a, (hl)
      000010 21r85r00               386 	ld	hl, #_floorYPosition
      000013 96                     387 	sub	a, (hl)
      000014 38 02                  388 	jr	C, 00102$
                           000016   389 	C$main.c$43$2_0$95	= .
                                    390 	.globl	C$main.c$43$2_0$95
                                    391 ;main.c:43: return floorYPosition;
      000016 5E                     392 	ld	e, (hl)
      000017 C9                     393 	ret
      000018                        394 00102$:
                           000018   395 	C$main.c$46$1_0$94	= .
                                    396 	.globl	C$main.c$46$1_0$94
                                    397 ;main.c:46: return -1;
      000018 1E FF                  398 	ld	e, #0xff
                           00001A   399 	C$main.c$47$1_0$94	= .
                                    400 	.globl	C$main.c$47$1_0$94
                                    401 ;main.c:47: }
                           00001A   402 	C$main.c$47$1_0$94	= .
                                    403 	.globl	C$main.c$47$1_0$94
                           00001A   404 	XG$wouldhitsurface$0$0	= .
                                    405 	.globl	XG$wouldhitsurface$0$0
      00001A C9                     406 	ret
                           00001B   407 	G$jump$0$0	= .
                                    408 	.globl	G$jump$0$0
                           00001B   409 	C$main.c$49$1_0$97	= .
                                    410 	.globl	C$main.c$49$1_0$97
                                    411 ;main.c:49: void jump(UINT8 spriteid, UINT8 spritelocation[2])
                                    412 ;	---------------------------------
                                    413 ; Function jump
                                    414 ; ---------------------------------
      00001B                        415 _jump::
      00001B E8 F9                  416 	add	sp, #-7
                           00001D   417 	C$main.c$53$1_0$97	= .
                                    418 	.globl	C$main.c$53$1_0$97
                                    419 ;main.c:53: if (jumping == 0)
      00001D 21r82r00               420 	ld	hl, #_jumping
      000020 7E                     421 	ld	a, (hl)
      000021 B7                     422 	or	a, a
      000022 20 07                  423 	jr	NZ, 00102$
                           000024   424 	C$main.c$55$2_0$98	= .
                                    425 	.globl	C$main.c$55$2_0$98
                                    426 ;main.c:55: jumping = 1;
      000024 36 01                  427 	ld	(hl), #0x01
                           000026   428 	C$main.c$56$2_0$98	= .
                                    429 	.globl	C$main.c$56$2_0$98
                                    430 ;main.c:56: currentspeedY = 10;
      000026 21r84r00               431 	ld	hl, #_currentspeedY
      000029 36 0A                  432 	ld	(hl), #0x0a
      00002B                        433 00102$:
                           00002B   434 	C$main.c$59$1_0$97	= .
                                    435 	.globl	C$main.c$59$1_0$97
                                    436 ;main.c:59: currentspeedY = currentspeedY + gravity;
      00002B FAr84r00               437 	ld	a, (#_currentspeedY)
      00002E 21r83r00               438 	ld	hl, #_gravity
      000031 86                     439 	add	a, (hl)
      000032 EAr84r00               440 	ld	(#_currentspeedY),a
                           000035   441 	C$main.c$61$1_0$97	= .
                                    442 	.globl	C$main.c$61$1_0$97
                                    443 ;main.c:61: spritelocation[1] = spritelocation[1] - currentspeedY;
                                    444 ;c
      000035 F8 0A                  445 	ldhl	sp,#10
      000037 2A                     446 	ld	a, (hl+)
      000038 5F                     447 	ld	e, a
      000039 56                     448 	ld	d, (hl)
      00003A 6B                     449 	ld	l, e
      00003B 62                     450 	ld	h, d
      00003C 23                     451 	inc	hl
      00003D 33                     452 	inc	sp
      00003E 33                     453 	inc	sp
      00003F 5D                     454 	ld	e, l
      000040 54                     455 	ld	d, h
      000041 D5                     456 	push	de
      000042 1A                     457 	ld	a, (de)
      000043 21r84r00               458 	ld	hl, #_currentspeedY
      000046 96                     459 	sub	a, (hl)
      000047 47                     460 	ld	b, a
      000048 E1                     461 	pop	hl
      000049 E5                     462 	push	hl
      00004A 70                     463 	ld	(hl), b
                           00004B   464 	C$main.c$63$1_0$97	= .
                                    465 	.globl	C$main.c$63$1_0$97
                                    466 ;main.c:63: possiblesurfaceY = wouldhitsurface(spritelocation[1]);
      00004B C5                     467 	push	bc
      00004C 33                     468 	inc	sp
      00004D CDr0Dr00               469 	call	_wouldhitsurface
      000050 33                     470 	inc	sp
      000051 F8 06                  471 	ldhl	sp,	#6
      000053 73                     472 	ld	(hl), e
                           000054   473 	C$main.c$68$1_0$97	= .
                                    474 	.globl	C$main.c$68$1_0$97
                                    475 ;main.c:68: move_sprite(spriteid, spritelocation[0], possiblesurfaceY);
      000054 F8 0A                  476 	ldhl	sp,	#10
      000056 2A                     477 	ld	a, (hl+)
      000057 5E                     478 	ld	e, (hl)
      000058 F8 02                  479 	ldhl	sp,	#2
      00005A 22                     480 	ld	(hl+), a
      00005B 73                     481 	ld	(hl), e
      00005C F8 09                  482 	ldhl	sp,	#9
      00005E 7E                     483 	ld	a, (hl)
      00005F F8 04                  484 	ldhl	sp,	#4
                           000061   485 	C$main.c$65$1_0$97	= .
                                    486 	.globl	C$main.c$65$1_0$97
                                    487 ;main.c:65: if (possiblesurfaceY > -1)
      000061 22                     488 	ld	(hl+), a
      000062 23                     489 	inc	hl
      000063 5E                     490 	ld	e, (hl)
      000064 3E FF                  491 	ld	a,#0xff
      000066 57                     492 	ld	d,a
      000067 96                     493 	sub	a, (hl)
      000068 CB 7B                  494 	bit	7, e
      00006A 28 07                  495 	jr	Z, 00120$
      00006C CB 7A                  496 	bit	7, d
      00006E 20 08                  497 	jr	NZ, 00121$
      000070 BF                     498 	cp	a, a
      000071 18 05                  499 	jr	00121$
      000073                        500 00120$:
      000073 CB 7A                  501 	bit	7, d
      000075 28 01                  502 	jr	Z, 00121$
      000077 37                     503 	scf
      000078                        504 00121$:
      000078 30 21                  505 	jr	NC, 00104$
                           00007A   506 	C$main.c$67$2_0$99	= .
                                    507 	.globl	C$main.c$67$2_0$99
                                    508 ;main.c:67: jumping = 0;
      00007A 21r82r00               509 	ld	hl, #_jumping
      00007D 36 00                  510 	ld	(hl), #0x00
                                    511 ;main.c:68: move_sprite(spriteid, spritelocation[0], possiblesurfaceY);
      00007F F8 02                  512 	ldhl	sp,#2
      000081 2A                     513 	ld	a, (hl+)
      000082 5F                     514 	ld	e, a
      000083 56                     515 	ld	d, (hl)
      000084 1A                     516 	ld	a, (de)
      000085 4F                     517 	ld	c, a
                                    518 ;c:/gbdk2020/gbdk/include/gb/gb.h:1077: OAM_item_t * itm = &shadow_OAM[nb];
      000086 11r00r00               519 	ld	de, #_shadow_OAM+0
      000089 23                     520 	inc	hl
      00008A 6E                     521 	ld	l, (hl)
      00008B 26 00                  522 	ld	h, #0x00
      00008D 29                     523 	add	hl, hl
      00008E 29                     524 	add	hl, hl
      00008F 19                     525 	add	hl, de
      000090 5D                     526 	ld	e, l
      000091 54                     527 	ld	d, h
                                    528 ;c:/gbdk2020/gbdk/include/gb/gb.h:1078: itm->y=y, itm->x=x;
      000092 F8 06                  529 	ldhl	sp,	#6
      000094 7E                     530 	ld	a, (hl)
      000095 12                     531 	ld	(de), a
      000096 13                     532 	inc	de
      000097 79                     533 	ld	a, c
      000098 12                     534 	ld	(de), a
                           000099   535 	C$main.c$68$1_0$97	= .
                                    536 	.globl	C$main.c$68$1_0$97
                                    537 ;main.c:68: move_sprite(spriteid, spritelocation[0], possiblesurfaceY);
      000099 18 24                  538 	jr	00108$
      00009B                        539 00104$:
                                    540 ;main.c:72: move_sprite(spriteid, spritelocation[0], spritelocation[1]);
      00009B D1                     541 	pop	de
      00009C D5                     542 	push	de
      00009D 1A                     543 	ld	a, (de)
      00009E F8 05                  544 	ldhl	sp,	#5
      0000A0 32                     545 	ld	(hl-), a
      0000A1 2B                     546 	dec	hl
      0000A2 2B                     547 	dec	hl
      0000A3 2A                     548 	ld	a, (hl+)
      0000A4 5F                     549 	ld	e, a
      0000A5 56                     550 	ld	d, (hl)
      0000A6 1A                     551 	ld	a, (de)
      0000A7 F8 06                  552 	ldhl	sp,	#6
                                    553 ;c:/gbdk2020/gbdk/include/gb/gb.h:1077: OAM_item_t * itm = &shadow_OAM[nb];
      0000A9 32                     554 	ld	(hl-), a
      0000AA 2B                     555 	dec	hl
      0000AB 4E                     556 	ld	c, (hl)
      0000AC 06 00                  557 	ld	b, #0x00
      0000AE 69                     558 	ld	l, c
      0000AF 60                     559 	ld	h, b
      0000B0 29                     560 	add	hl, hl
      0000B1 29                     561 	add	hl, hl
      0000B2 11r00r00               562 	ld	de, #_shadow_OAM
      0000B5 19                     563 	add	hl, de
      0000B6 4D                     564 	ld	c, l
      0000B7 44                     565 	ld	b, h
                                    566 ;c:/gbdk2020/gbdk/include/gb/gb.h:1078: itm->y=y, itm->x=x;
      0000B8 F8 05                  567 	ldhl	sp,	#5
      0000BA 2A                     568 	ld	a, (hl+)
      0000BB 02                     569 	ld	(bc), a
      0000BC 03                     570 	inc	bc
      0000BD 7E                     571 	ld	a, (hl)
      0000BE 02                     572 	ld	(bc), a
                           0000BF   573 	C$main.c$72$1_0$97	= .
                                    574 	.globl	C$main.c$72$1_0$97
                                    575 ;main.c:72: move_sprite(spriteid, spritelocation[0], spritelocation[1]);
      0000BF                        576 00108$:
                           0000BF   577 	C$main.c$74$1_0$97	= .
                                    578 	.globl	C$main.c$74$1_0$97
                                    579 ;main.c:74: }
      0000BF E8 07                  580 	add	sp, #7
                           0000C1   581 	C$main.c$74$1_0$97	= .
                                    582 	.globl	C$main.c$74$1_0$97
                           0000C1   583 	XG$jump$0$0	= .
                                    584 	.globl	XG$jump$0$0
      0000C1 C9                     585 	ret
                           0000C2   586 	G$main$0$0	= .
                                    587 	.globl	G$main$0$0
                           0000C2   588 	C$main.c$76$1_0$107	= .
                                    589 	.globl	C$main.c$76$1_0$107
                                    590 ;main.c:76: void main()
                                    591 ;	---------------------------------
                                    592 ; Function main
                                    593 ; ---------------------------------
      0000C2                        594 _main::
                           0000C2   595 	C$main.c$78$1_0$107	= .
                                    596 	.globl	C$main.c$78$1_0$107
                                    597 ;main.c:78: set_sprite_data(0, 8, bloke);
      0000C2 21r00r00               598 	ld	hl, #_bloke
      0000C5 E5                     599 	push	hl
      0000C6 3E 08                  600 	ld	a, #0x08
      0000C8 F5                     601 	push	af
      0000C9 33                     602 	inc	sp
      0000CA AF                     603 	xor	a, a
      0000CB F5                     604 	push	af
      0000CC 33                     605 	inc	sp
      0000CD CDr00r00               606 	call	_set_sprite_data
      0000D0 E8 04                  607 	add	sp, #4
                                    608 ;c:/gbdk2020/gbdk/include/gb/gb.h:1004: shadow_OAM[nb].tile=tile;
      0000D2 21r02r00               609 	ld	hl, #(_shadow_OAM + 0x0002)
      0000D5 36 00                  610 	ld	(hl), #0x00
                           0000D7   611 	C$main.c$81$1_0$107	= .
                                    612 	.globl	C$main.c$81$1_0$107
                                    613 ;main.c:81: playerlocation[0] = 10;
      0000D7 21r80r00               614 	ld	hl, #_playerlocation
      0000DA 36 0A                  615 	ld	(hl), #0x0a
                           0000DC   616 	C$main.c$82$1_0$107	= .
                                    617 	.globl	C$main.c$82$1_0$107
                                    618 ;main.c:82: playerlocation[1] = floorYPosition;
      0000DC 11r81r00               619 	ld	de, #(_playerlocation + 0x0001)
      0000DF FAr85r00               620 	ld	a, (#_floorYPosition)
      0000E2 12                     621 	ld	(de), a
                                    622 ;main.c:84: move_sprite(0, playerlocation[0], playerlocation[1]);
      0000E3 21r81r00               623 	ld	hl, #(_playerlocation + 0x0001)
      0000E6 46                     624 	ld	b, (hl)
      0000E7 21r80r00               625 	ld	hl, #_playerlocation
      0000EA 4E                     626 	ld	c, (hl)
                                    627 ;c:/gbdk2020/gbdk/include/gb/gb.h:1077: OAM_item_t * itm = &shadow_OAM[nb];
      0000EB 21r00r00               628 	ld	hl, #_shadow_OAM
                                    629 ;c:/gbdk2020/gbdk/include/gb/gb.h:1078: itm->y=y, itm->x=x;
      0000EE 78                     630 	ld	a, b
      0000EF 22                     631 	ld	(hl+), a
      0000F0 71                     632 	ld	(hl), c
                           0000F1   633 	C$main.c$85$1_0$107	= .
                                    634 	.globl	C$main.c$85$1_0$107
                                    635 ;main.c:85: jumping = 0;
      0000F1 21r82r00               636 	ld	hl, #_jumping
      0000F4 36 00                  637 	ld	(hl), #0x00
                           0000F6   638 	C$main.c$87$1_0$107	= .
                                    639 	.globl	C$main.c$87$1_0$107
                                    640 ;main.c:87: DISPLAY_ON;
      0000F6 F0r00                  641 	ldh	a, (_LCDC_REG+0)
      0000F8 F6 80                  642 	or	a, #0x80
      0000FA E0r00                  643 	ldh	(_LCDC_REG+0),a
                           0000FC   644 	C$main.c$88$1_0$107	= .
                                    645 	.globl	C$main.c$88$1_0$107
                                    646 ;main.c:88: SHOW_SPRITES;
      0000FC F0r00                  647 	ldh	a, (_LCDC_REG+0)
      0000FE F6 02                  648 	or	a, #0x02
      000100 E0r00                  649 	ldh	(_LCDC_REG+0),a
                           000102   650 	C$main.c$90$1_0$107	= .
                                    651 	.globl	C$main.c$90$1_0$107
                                    652 ;main.c:90: while(1)
      000102                        653 00109$:
                           000102   654 	C$main.c$92$2_0$108	= .
                                    655 	.globl	C$main.c$92$2_0$108
                                    656 ;main.c:92: if ((joypad() & J_A) || jumping == 1)
      000102 CDr00r00               657 	call	_joypad
      000105 CB 63                  658 	bit	4, e
      000107 20 06                  659 	jr	NZ, 00101$
      000109 FAr82r00               660 	ld	a, (#_jumping)
      00010C 3D                     661 	dec	a
      00010D 20 0C                  662 	jr	NZ, 00102$
      00010F                        663 00101$:
                           00010F   664 	C$main.c$94$3_0$109	= .
                                    665 	.globl	C$main.c$94$3_0$109
                                    666 ;main.c:94: jump(0, playerlocation);
      00010F 21r80r00               667 	ld	hl, #_playerlocation
      000112 E5                     668 	push	hl
      000113 AF                     669 	xor	a, a
      000114 F5                     670 	push	af
      000115 33                     671 	inc	sp
      000116 CDr1Br00               672 	call	_jump
      000119 E8 03                  673 	add	sp, #3
      00011B                        674 00102$:
                           00011B   675 	C$main.c$97$2_0$108	= .
                                    676 	.globl	C$main.c$97$2_0$108
                                    677 ;main.c:97: if (joypad() & J_LEFT)
      00011B CDr00r00               678 	call	_joypad
      00011E CB 4B                  679 	bit	1, e
      000120 28 13                  680 	jr	Z, 00105$
                           000122   681 	C$main.c$99$3_0$110	= .
                                    682 	.globl	C$main.c$99$3_0$110
                                    683 ;main.c:99: playerlocation[0] = playerlocation[0] - 2;
      000122 FAr80r00               684 	ld	a, (#_playerlocation + 0)
      000125 3D                     685 	dec	a
      000126 3D                     686 	dec	a
      000127 EAr80r00               687 	ld	(#_playerlocation),a
                                    688 ;main.c:100: move_sprite(0, playerlocation[0], playerlocation[1]);
      00012A 21r81r00               689 	ld	hl, #(_playerlocation + 0x0001)
      00012D 46                     690 	ld	b, (hl)
      00012E 4F                     691 	ld	c, a
                                    692 ;c:/gbdk2020/gbdk/include/gb/gb.h:1077: OAM_item_t * itm = &shadow_OAM[nb];
      00012F 21r00r00               693 	ld	hl, #_shadow_OAM
                                    694 ;c:/gbdk2020/gbdk/include/gb/gb.h:1078: itm->y=y, itm->x=x;
      000132 78                     695 	ld	a, b
      000133 22                     696 	ld	(hl+), a
      000134 71                     697 	ld	(hl), c
                           000135   698 	C$main.c$100$2_0$108	= .
                                    699 	.globl	C$main.c$100$2_0$108
                                    700 ;main.c:100: move_sprite(0, playerlocation[0], playerlocation[1]);
      000135                        701 00105$:
                           000135   702 	C$main.c$103$2_0$108	= .
                                    703 	.globl	C$main.c$103$2_0$108
                                    704 ;main.c:103: if (joypad() & J_RIGHT)
      000135 CDr00r00               705 	call	_joypad
      000138 7B                     706 	ld	a, e
      000139 0F                     707 	rrca
      00013A 30 13                  708 	jr	NC, 00107$
                           00013C   709 	C$main.c$105$3_0$111	= .
                                    710 	.globl	C$main.c$105$3_0$111
                                    711 ;main.c:105: playerlocation[0] = playerlocation[0] + 2;
      00013C FAr80r00               712 	ld	a, (#_playerlocation + 0)
      00013F C6 02                  713 	add	a, #0x02
      000141 EAr80r00               714 	ld	(#_playerlocation),a
                                    715 ;main.c:106: move_sprite(0, playerlocation[0], playerlocation[1]);
      000144 21r81r00               716 	ld	hl, #(_playerlocation + 0x0001)
      000147 4E                     717 	ld	c, (hl)
      000148 47                     718 	ld	b, a
                                    719 ;c:/gbdk2020/gbdk/include/gb/gb.h:1077: OAM_item_t * itm = &shadow_OAM[nb];
      000149 21r00r00               720 	ld	hl, #_shadow_OAM
                                    721 ;c:/gbdk2020/gbdk/include/gb/gb.h:1078: itm->y=y, itm->x=x;
      00014C 79                     722 	ld	a, c
      00014D 22                     723 	ld	(hl+), a
      00014E 70                     724 	ld	(hl), b
                           00014F   725 	C$main.c$106$2_0$108	= .
                                    726 	.globl	C$main.c$106$2_0$108
                                    727 ;main.c:106: move_sprite(0, playerlocation[0], playerlocation[1]);
      00014F                        728 00107$:
                           00014F   729 	C$main.c$109$2_0$108	= .
                                    730 	.globl	C$main.c$109$2_0$108
                                    731 ;main.c:109: performatdelay(5);
      00014F 3E 05                  732 	ld	a, #0x05
      000151 F5                     733 	push	af
      000152 33                     734 	inc	sp
      000153 CDr00r00               735 	call	_performatdelay
      000156 33                     736 	inc	sp
                           000157   737 	C$main.c$111$1_0$107	= .
                                    738 	.globl	C$main.c$111$1_0$107
                                    739 ;main.c:111: }
                           000157   740 	C$main.c$111$1_0$107	= .
                                    741 	.globl	C$main.c$111$1_0$107
                           000157   742 	XG$main$0$0	= .
                                    743 	.globl	XG$main$0$0
      000157 18 A9                  744 	jr	00109$
                                    745 	.area _CODE
                                    746 	.area _CABS (ABS)
